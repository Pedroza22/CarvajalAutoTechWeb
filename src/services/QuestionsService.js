import { supabase } from './supabase';

class QuestionsService {
  // Obtener todas las preguntas
  async getQuestions() {
    try {
      console.log('üîç Obteniendo todas las preguntas...');
      
      const { data, error } = await supabase
        .from('questions')
        .select(`
          *,
          categories (
            name
          )
        `)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error obteniendo preguntas:', error);
        throw error;
      }

      console.log('‚úÖ Preguntas obtenidas:', data?.length || 0);
      return data || [];
    } catch (error) {
      console.error('‚ùå Error en getQuestions:', error);
      throw error;
    }
  }

  // Obtener pregunta por ID
  async getQuestionById(questionId) {
    try {
      console.log('üîç Obteniendo pregunta por ID:', questionId);
      
      const { data, error } = await supabase
        .from('questions')
        .select(`
          *,
          categories (
            name
          )
        `)
        .eq('id', questionId)
        .single();

      if (error) {
        console.error('‚ùå Error obteniendo pregunta:', error);
        throw error;
      }

      console.log('‚úÖ Pregunta obtenida:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Error en getQuestionById:', error);
      throw error;
    }
  }

  // Crear nueva pregunta
  async createQuestion(questionData) {
    try {
      console.log('üîç Creando nueva pregunta...');
      
      // Obtener el usuario actual
      const { data: { user } } = await supabase.auth.getUser();
      
      const { data, error } = await supabase
        .from('questions')
        .insert({
          category_id: questionData.categoryId,
          type: questionData.type,
          question: questionData.question,
          options: questionData.options,
          correct_answer: questionData.correctAnswer,
          time_limit: questionData.timeLimit,
          image_url: questionData.imageUrl,
          explanation: questionData.explanation,
          created_by: user?.id || questionData.createdBy || 'system'
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creando pregunta:', error);
        throw error;
      }

      console.log('‚úÖ Pregunta creada:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Error en createQuestion:', error);
      throw error;
    }
  }

  // Actualizar pregunta
  async updateQuestion(questionId, questionData) {
    try {
      console.log('üîç Actualizando pregunta:', questionId);
      
      const { data, error } = await supabase
        .from('questions')
        .update({
          category_id: questionData.categoryId,
          type: questionData.type,
          question: questionData.question,
          options: questionData.options,
          correct_answer: questionData.correctAnswer,
          time_limit: questionData.timeLimit,
          image_url: questionData.imageUrl,
          explanation: questionData.explanation
        })
        .eq('id', questionId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error actualizando pregunta:', error);
        throw error;
      }

      console.log('‚úÖ Pregunta actualizada:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Error en updateQuestion:', error);
      throw error;
    }
  }

  // Eliminar pregunta
  async deleteQuestion(questionId) {
    try {
      console.log('üîç Eliminando pregunta:', questionId);
      
      const { error } = await supabase
        .from('questions')
        .delete()
        .eq('id', questionId);

      if (error) {
        console.error('‚ùå Error eliminando pregunta:', error);
        throw error;
      }

      console.log('‚úÖ Pregunta eliminada');
      return true;
    } catch (error) {
      console.error('‚ùå Error en deleteQuestion:', error);
      throw error;
    }
  }

  // Obtener preguntas por categor√≠a
  async getQuestionsByCategory(categoryId) {
    try {
      console.log('üîç Obteniendo preguntas por categor√≠a:', categoryId);
      
      const { data, error } = await supabase
        .from('questions')
        .select(`
          *,
          categories (
            name
          )
        `)
        .eq('category_id', categoryId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error obteniendo preguntas por categor√≠a:', error);
        throw error;
      }

      console.log('‚úÖ Preguntas por categor√≠a obtenidas:', data?.length || 0);
      return data || [];
    } catch (error) {
      console.error('‚ùå Error en getQuestionsByCategory:', error);
      throw error;
    }
  }

  // Funci√≥n auxiliar para formatear tipo de pregunta
  formatQuestionType(type) {
    const typeMap = {
      'multiple_choice': 'Opci√≥n M√∫ltiple',
      'true_false': 'Verdadero/Falso',
      'free_text': 'Texto Libre'
    };
    return typeMap[type] || type;
  }

  // Funci√≥n auxiliar para obtener icono seg√∫n tipo
  getQuestionTypeIcon(type) {
    const iconMap = {
      'multiple_choice': 'üîò',
      'true_false': '‚òëÔ∏è',
      'free_text': 'üìù'
    };
    return iconMap[type] || '‚ùì';
  }
}

export default new QuestionsService();